				CLASE 1

Base de Datos: Representa aspectos del mundo real, contando con una colección de datos coherentes y relacionados entre sí que deben seguir una cierta lógica. Se sustentan físicamente en archivos

Archivos: Registros guardados en almacenamiento secundario. Se organizan como secuencia de bytes (No es fácil saber donde inician o terminan) o como Registros y Campos (Los campos son la parte más pequeña pero significativa lógicamente de un archivo. Los registros son un conjunto agrupado de campos que definen un elemento)
Se califican en 3 tipos. Serie (Accede a un registro luego de entrar al anterior. Accceso secuencial físico y lineal), Secuencial (Los registros se acceden en orden basado en una clave. Acceso secuencial indizado) y directo (Accede al registro necesitado de una. Acceso directo y constante)

Buffer: Memoria intermedia entre un archivo y un programa. Los datos residen allí hasta ser almacenados en memoria secundaria o luego de ser recuperados por la misma

				CLASE 2

Maestro-Detalle: Involucra usar varios archivos. El archivo maestro tiene un conjunto de datos, el cual será actualizado por los contenidos de los archivos detalle. Un maestro puede tener varios detalles, pero deben estar ordenados por el mismo criterio. Cada elemento del maestro puede aparecer máximo una vez en el detalle

Corte Control: Usado para generar reportes. El archivo usado debe estar ordenado por al menos un criterio

Merge: Resume archivos similares en uno solo. Los archivos detalle deben tener la misma estructura y orden por mismo criterio

				CLASE 3

RAM: Memoria rápida de acceso simple, pero comparado a la secundaria, su capacidad es limitada, cuesta más y es volátil. Lo bueno es que la RAM se tarda mucho menos tiempo en buscar los datos, y su información igual se organiza con archivos

Los archivos se dividen en 2: Físico (Existe en almacenamiento secundario y aparece en su directorio) y Lógico (Visto por el programa y dejándole saber las operaciones a realizar)

Viaje Byte: No es sencillo, pues algo como una escritura puede demorar ciclos en realizarse. Quienes se involucran son los siguientes
	+Administrador de Archivos: Programas del SO que tratan con aspectos relacionados al archivo y dispositivos E/S
	+Buffer E/S: Agiliza la E/S de los datos, indicando que trabaja con enormes grupos de datos de la RAM para bajar el acceso a almacenamiento secundario
	+Procesador E/S: Es independiente de la CPU, ocupándose de la transferencia desde o hacia el almacenamiento externo
	+Controlador de Disco: Controla todas las operaciones del disco

Los campos y registros de un archivo pueden ser de longitud fija o variable, pero hay pros y contras. Si los campos son de longitud fija, puede desperdiciarse el espacio si se lo intenta agrandar. En caso de los registros ocurre lo mismo si su longitud fuera fija

Claves: Permiten identificar al registro y generar orden por ese criterio. Se dividen en clave Primaria (Identifican un elemento en específico) y Secundaria (No identifican un solo registro)

Baja Lógica: Eliminación en archivos donde se deja una marca en el registro a eliminar para poder reusar el espacio

Baja Física: Baja usada para mandar todos los registros menos los eliminados a un nuevo archivo

Búsqueda Secuencial: Usa marcas de borrado para recorrer el archivo y encontrar el primer elemento eliminado. Si no se encuentra, se agrega el registro al final del archivo

Eliminación de Primer Ajuste: Elige la primera entrada de la lista de disponibles, almacenando allí el registro

Eliminación de Mejor Ajuste: Elige la entrada más aproximada al tamaño del registro

Eliminación de Peor Ajuste: Elige la entrada más grande para el registro, dándole el espacio que necesite

				CLASE 4

El costo de búsqueda de información puede variar por el numero de comparaciones (Operaciones en memoria) y el de accesos (Operaciones en disco). para buscar un registro, es más fácil si supiéramos su NRR (Numero Relativo de Registro). En los archivos secuenciales, se busca desde el inicio, y se tratará de aplicar claves

Búsqueda binaria: Acorta el espacio del archivo para buscar información. debe estar ordenado por una clave y sus registros deben tener longitud fija

Si los archivos son muy grandes para la RAM, se los parte en pedazos, se los ordena y se juntan las partes ordenadas

La búsqueda binaria mejora la secuencial, pero no puede bajar la cantidad de accesos a 1

				CLASE 5

ÍNDICE: Herramienta usada para encontrar campos en registros y ponerles orden sin reacomodarlos. se usa como campo de búsqueda y de referencia para indicar dónde encontrar el registro en el archivo

ALTA DE REGISTROS: Implica agregar registros al archivo de datos y al de índices. En el de datos, se copia al final sabiendo la distancia para el índice. Y en el de índices, se ordena con cada elemento en memoria, seteando el flag anterior

BAJA DE REGISTROS: En el archivo de datos, se usa cualquier método visto para el ahorro de espacio. En el de índices, se remueve la entrada o se marca como borrada

ACTUALIZACIÓN DE REGISTROS: Ocurren 2 cosas. +Sin modificar la clave -> Si el registro no cambia su longitud, se guarda el dato nuevo en la misma posición física. Si cambia la longitud, se reubica en el archivo de datos y guardo la nueva posición en el índice. Si es de longitud fija, no hago nada más

+Modificando la clave: Modifica el archivo de datos y se reorganiza y actualiza el de índices

ÍNDICE SECUNDARIO: Campo que pertenece a una llave secundaria por poder repetirse. Relaciona dicha llave con la primaria. Tiene un problema que sería los datos repetidos, pues el archivo de índices se reacomoda con cada alta a pesar de ingresar una clave secundaria existente. Esto provoca desperdicio de espacio y menos chance de que el índice entre en memoria

Para arreglarlo, se suma la clave al vector de punteros con repeticiones, sin tener que reacomodar más que dicho vector si se agrega una clave existente. En caso de una nueva, se genera un arreglo con la clave y un elemento en el vector inicial. Pero igual hay otro problema, que es elegir el tamaño del vector. Si fuera de longitud fija, el espacio puede ser insuficiente o sobrar, causando fragmentación interna. Se arregla sumando la clave con la lista de punteros con repeticiones

LISTA INVERTIDA: Archivo donde la clave secundaria lleva a un grupo de una o más primarias. No se pierde espacio en ellas,, y si agrego un elemento, no se debe reordenar todo

				CLASE 6

Unos problemas con los índices en arboles es que hacen la búsqueda y la ordenación más costosa

ÁRBOL: Estructura de datos con una búsqueda de info más rápida

ÁRBOL BINARIO: Árbol donde cada nodo suyo tiene dos sucesores/hijos, siendo izquierdo y derecho

ÁRBOL BINARIO BALANCEADO: Los arboles están balanceados cuando la altura de la trayectoria más corta a una hoja y la más grande no difieren. Lo malo es que se desbalancean bastante fácil

ÁRBOL AVL: Es un árbol balanceado en altura donde las altas y bajas se hacen con muy pocos accesos

ÁRBOL MULTICAMINO: Generalización de arboles binarios. Los nodos tienen k punteros y k-1 claves, bajando la profundidad del árbol

ÁRBOL B*: Árbol donde cada nodo está lleno en 2/3 partes. Sus operaciones de búsqueda son como las de un árbol B, pero la inserción tiene 3 variantes: Derecha (Redistribuyo con el nodo adyacente derecho), Izquierda o Derecha (Si no puedo redistribuir con el nodo derecho porque está lleno, lo hago con el izquierdo), e Izquierda y Derecha (Busca llenar los 3 nodos, teniendo 3/4 llenos)

ÁRBOL B+: Grupos de registros ordenados por clave secuencialmente junto a los grupos de índices, donde sus nodos internos tienen punteros a los datos

				CLASE 7

HASHING: Técnica usada para generar una dirección base única para cierta clave y conseguirla con solo un acceso. se usa la dispersión cuando quiere accederse rápido a una de ellas
	Atributos: No necesita almacenamiento extra, la inserción y eliminación es mas fácil y encuentra datos con pocos accesos a disco
	Costo: Los registros no pueden ser de longitud variable, no pueden haber claves duplicadas y no puede haber orden físico

FUNCIÓN DE HASH: Caja negra que obtiene la dirección del registro a partir de una clave. A diferencia de los índices, dos llaves distintas pueden transformarse en direcciones iguales, causando colisiones, y no tienen relación entre llave y dirección

	Colisión: Ocurre cuando se le asigna a un registro una dirección que otro ya ocupa
	Overflow: Idem colisión, pero no hay espacio para el registro nuevo
	Solución: Esparcir los registros de alguna manera

TAMAÑO DE NODOS: Pueden tener más de un registro. Entre más grande el tamaño, menor overflow y mayor fragmentación, además de búsqueda más lenta

DENSIDAD EMPAQUETAMIENTO: Porcentaje del espacio que se asignó en el archivo para almacenar registros. A menor densidad, hay menos overflow, pero más espacio desperdiciado

MÉTODO DE TRATAMIENTO DE DESBORDES: Reduce el porcentaje de overflow, pero nunca baja a 0%. Entre sus soluciones se encuentran...
	Saturación Progresiva: Si el nodo está completo, busca el próximo libre. Su eliminación no debe obstaculizar las búsquedas
	Saturación Progresiva Encadenada: Idem Saturación Progresiva, pero encadena los registros saturados sin ocupar posiciones contiguas
	Dispersión Doble: A la dirección donde hay overflow le suma un número C las veces que sea necesaria hasta encontrar una dirección con espacio
	Área Separada de Desborde: No usa nodos con direcciones, sino que envía a los registros a nodos especiales

HASH ESTÁTICO: Necesita un numero fijo de direcciones. Si se llena el archivo, hay mucha saturación y debe hacerse mucho para redispersar los registros

HASH DINÁMICO: Solución al hashing estático que reorganiza todo sin mover a tantos registros

HASH EXTENSIBLE: Adapta el resultado de la función de hash acorde a la cantidad de registros y cubetas de almacenamiento del archivo. Usa los bits necesarios para cada instancia del archivo, que toman la dirección del nodo a usar